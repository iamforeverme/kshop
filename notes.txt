********************************************************************************
User: admin
Password: kshop123
********************************************************************************
Created Docker and base application
1. Create "Dockerfile"

FROM django:1.9.5-python2
MAINTAINER Kevin
ENV DIR /src/
RUN mkdir ${DIR}
COPY requirements.txt .
RUN ["pip","install","-r","requirements.txt"]
WORKDIR ${DIR}
LABEL version="1.0" \
      description="This image is used to set up django sevier."
      
2. requirements.txt
djangorestframework==3.3.3

3. Build the image
docker build -t kevin/web .

4. docker-compose
edit docker-compose.yml 

version: '2'
services:
  web:
    build: .
    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/src
    ports:
      - "8000:8000"
docker-compose build
5.  Create a python project (VPN can not support this step)
docker-compose run web django-admin.py startproject kshop  .



6. Create a python app
docker-compose run web python manage.py startapp goods

7. Change ownership of created code
sudo chown -R $USER:$USER .

8. Init database & super users:
docker-compose run web python manage.py migrate
docker-compose run web python manage.py makemigrations
docker-compose run web python manage.py createsuperuser


9. Set up server to check if everything is fine
docker-compose up

10. clean useless containers.
docker stop $(docker ps -a -q)
docker rm -f $(docker ps -a -q)

11. Check port usage:
netstat -anp | grep 834

********************************************************************************
1. remove postgres deamon
sudo apt-get --purge autoremove postgresql*

2. install client on the console only:
sudo apt-get install postgresql-client-*

3. After running the deamon, test database's connection
psql -h localhost -p 5432 -U postgres

Set up database

# to show database update
docker-compose run web python manage.py makemigrations

# to migrate
docker-compose run web python manage.py migrate


5. Create user and database for the application
psql -h localhost -p 5432 -U postgres -f ./scripts/init_database.sql

docker-compose run web python manage.py createsuperuser # reset database mustbe

/du  #userlist
/l # user & access control
/z #显示权限和表

\c myapp; #change database
\q quit

# delete some migration related tables to reset migration


FYI:
Milk powder: http://mt.sohu.com/20150108/n407645079.shtml 


Django:

Tutorials:
https://docs.djangoproject.com/en/1.10/intro/tutorial04/

APIs:
https://docs.djangoproject.com/en/1.10/ref/

Best practices:
https://docs.djangoproject.com/en/1.10/topics/

How-to:
https://docs.djangoproject.com/en/1.10/howto/

python -m django --version
django-admin startproject mysite
python manage.py runserver 0.0.0.0:8000

Run python manage.py makemigrations to create migrations for those changes
Run python manage.py migrate to apply those changes to the database.

Shell: 
python manage.py shell
>>> from polls.models import Question, Choice   # Import the model classes we just wrote.
# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())
>>> q.save()
>>> q.id
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()
latest_question_list = Question.objects.order_by('-pub_date')[:5]



Database:
show tables: \dt (PostgreSQL), SHOW TABLES; (MySQL), 

Add meaningful lines for ORM:
def __str__(self):
    return self.choice_text

Template:
from django.template import loader
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

polls/templates/polls/detail.html
<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>

URL:
1. reverse url:
url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail'),
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

View functions:
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))